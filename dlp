#!/usr/bin/env python

from pkg.models import Base, Download, Channel, Subscription
import argparse
import os, sys
import logging
import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from typing import Optional
import typer
from pkg.fetch import *
from pkg.util import *
from dotenv import load_dotenv

load_dotenv()

__app_name__ = "dlp"
__version__ = "0.1.0"

app = typer.Typer()


def _version_callback(value: bool) -> None:
    if value:
        typer.echo(f"{__app_name__} v{__version__}")
        raise typer.Exit()


@app.command()
def fetch(

):
    """
    Fetches a given set of videos and adds them to the local Video table
    from where they can be added to the downloads table
    :return:
    """

    api_key = genv("API_KEY")
    db_user = genv("DB_USERNAME")
    db_host = genv("DB_HOST")
    db_name = genv("DB_NAME")
    db_pass = genv("DB_PASS")
    sec_file = genv("CLIENT_SECRETS_FILE")

    url = URL.create(
        drivername="postgresql",
        username=db_user,
        host=db_host,
        database=db_name,
        password=db_pass
    )

    engine = create_engine(url)
    Base.metadata.create_all(engine)

    conn = engine.connect()
    if conn.closed:
        raise ValueError("PostgreSQL not connected")

    # todo optional
    fetch_subscribed_channels(engine, sec_file)

    asyncio.run(fetch_all_videos_from_channels_async(engine, api_key))

@app.callback()
def main(
    version: Optional[bool] = typer.Option(
        None,
        "--version",
        "-v",
        help="Show the application's version and exit.",
        callback=_version_callback,
        is_eager=True,
    )
) -> None:
    return

if __name__ == "__main__":
  app(prog_name=__app_name__)